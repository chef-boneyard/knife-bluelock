= Knife Bluelock

= DESCRIPTION:

This is the official Opscode Knife plugin for Bluelock. This plugin gives knife the ability to create, bootstrap, and manage servers on the Bluelock Cloud.

= INSTALLATION:

Be sure you are running the latest version Chef. Versions earlier than 0.10.0 don't support plugins:

    gem install chef

This plugin depends on a forked version of fog[http://github.com/chirag-jog/fog]. Download and Install It.

    wget https://github.com/chirag-jog/fog/zipball/master
    unzip master
    cd *fog*
    gem build fog.spec
    gem install fog-<version>.gem 

This plugin is distributed as a Ruby Gem. To install it, run:

    gem install knife-bluelock

Depending on your system's configuration, you may need to run this command with root privileges.

= CONFIGURATION:

In order to communicate with the Bluelock Cloud API you will have to tell Knife about your Username and API Key. The easiest way to accomplish this is to create some entries in your <tt>knife.rb</tt> file:

    knife[:bluelock_username] = "Your Bluelock Account Username"
    knife[:bluelock_password] = "Your Bluelock Account Password"

If your knife.rb file will be checked into a SCM system (ie readable by others) you may want to read the values from environment variables:

    knife[:bluelock_username] = "#{ENV['BLUELOCK_USERNAME']}"
    knife[:bluelock_password] = "#{ENV['BLUELOCK_PASSWORD']}"

You also have the option of passing your Bluelock Username/Password into the individual knife subcommands using the <tt>-A</tt> (or <tt>--bluelock-username</tt>) <tt>-K</tt> (or <tt>--bluelock-password</tt>) command options

    # provision a new 2 Core 1GB Ubuntu 10.04 webserver
    knife bluelock server create --vcpus 2 -m 1024 -I 40 -A 'Your Bluelock Username' -K "Your Bluelock Password" -r 'role[webserver]'

Additionally the following options may be set in your `knife.rb`:

* image
* distro
* template_file

= SUBCOMMANDS:

This plugin provides the following Knife subcommands. Specific command options can be found by invoking the subcommand with a <tt>--help</tt> flag

== knife bluelock server create

Provisions a new server in the Bluelock Cloud and then perform a Chef bootstrap (using the SSH protocol). The goal of the bootstrap is to get Chef installed on the target system so it can run Chef Client with a Chef Server. The main assumption is a baseline OS installation exists (provided by the provisioning). It is primarily intended for Chef Client systems that talk to a Chef server. By default the server is bootstrapped using the {ubuntu10.04-gems}[https://github.com/opscode/chef/blob/master/chef/lib/chef/knife/bootstrap/ubuntu10.04-gems.erb] template. This can be overridden using the <tt>-d</tt> or <tt>--template-file</tt> command options.

== knife bluelock server delete

Deletes an existing server in the currently configured Bluelock Cloud account by the server/instance id. You can find the instance id by entering 'knife bluelock server list'. Please note - this does not delete the associated node and client objects from the Chef server.

== knife bluelock server list

Outputs a list of all servers in the currently configured Bluelock Cloud account. Please note - this shows all instances associated with the account, some of which may not be currently managed by the Chef server.

== knife bluelock image list

Outputs a list of all available images available to the currently configured Bluelock Cloud account. An image is a collection of files used to create or rebuild a server. Bluelock provides a number of pre-built OS images by default. This data can be useful when choosing an image id to pass to the <tt>knife bluelock server create</tt> subcommand.


= LICENSE:

Author:: Adam Jacob (<adam@opscode.com>)
Author:: Seth Chisamore (<schisamo@opscode.com>)
Copyright:: Copyright (c) 2009-2012 Opscode, Inc.
License:: Apache License, Version 2.0

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
